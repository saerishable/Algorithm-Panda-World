Index: Team1/6-Graph/Baekjoon/T1 대훈/BOJ2252_줄_세우기.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class BOJ2252_줄_세우기 {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        ArrayList<ArrayList<Integer>> A = new ArrayList<>();\r\n        int N = sc.nextInt();\r\n        int M = sc.nextInt();\r\n        for(int i=0; i<=N; i++) {\r\n            A.add(new ArrayList<>());\r\n        }\r\n        int[] indegree = new int[N+1];\r\n        for(int i=0; i<M; i++) {\r\n            int S = sc.nextInt();\r\n            int E = sc.nextInt();\r\n            A.get(S).add(E);\r\n            indegree[E]++;\r\n        }\r\n        Queue<Integer> queue = new LinkedList<>();\r\n        for (int i=1; i<=N; i++) {\r\n            if(indegree[i] == 0) {\r\n                queue.offer(i);\r\n            }\r\n        }while (!queue.isEmpty()){\r\n            int now = queue.poll();\r\n            System.out.println(now + \" \");\r\n            for(int next : A.get(now)){\r\n                indegree[next] --;\r\n                if(indegree[next]==0) {\r\n                    queue.offer(next);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Team1/6-Graph/Baekjoon/T1 대훈/BOJ2252_줄_세우기.java b/Team1/6-Graph/Baekjoon/T1 대훈/BOJ2252_줄_세우기.java
--- a/Team1/6-Graph/Baekjoon/T1 대훈/BOJ2252_줄_세우기.java	
+++ b/Team1/6-Graph/Baekjoon/T1 대훈/BOJ2252_줄_세우기.java	
@@ -10,25 +10,25 @@
         int N = sc.nextInt();
         int M = sc.nextInt();
         for(int i=0; i<=N; i++) {
-            A.add(new ArrayList<>());
+            A.add(new ArrayList<>());//이중 ArrayList 생성
         }
         int[] indegree = new int[N+1];
         for(int i=0; i<M; i++) {
             int S = sc.nextInt();
             int E = sc.nextInt();
             A.get(S).add(E);
-            indegree[E]++;
+            indegree[E]++; //진입차수
         }
         Queue<Integer> queue = new LinkedList<>();
         for (int i=1; i<=N; i++) {
             if(indegree[i] == 0) {
-                queue.offer(i);
+                queue.offer(i); //진입차수가 0이면 큐에 넣음
             }
         }while (!queue.isEmpty()){
             int now = queue.poll();
             System.out.println(now + " ");
             for(int next : A.get(now)){
-                indegree[next] --;
+                indegree[next] --; //큐로 들어간 노드와 엣지로 이어진 노드의 진입 차수 차감
                 if(indegree[next]==0) {
                     queue.offer(next);
                 }
Index: Team1/6-Graph/Baekjoon/T1 대훈/P1707_이분_그래프.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class P1707_이분_그래프 {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int K = sc.nextInt();\r\n\r\n        for (int i=0; i<K; i++) {\r\n\r\n            int V = sc.nextInt();\r\n            int E = sc.nextInt();\r\n            boolean result = true;\r\n\r\n            List<Integer> A = new ArrayList<>();\r\n            List<Integer> B = new ArrayList<>();\r\n\r\n            for (int k=0; k<E; k++) {\r\n\r\n                int a = sc.nextInt();\r\n                int b = sc.nextInt();\r\n                A.add(a);\r\n                B.add(b);\r\n                }\r\n\r\n            for(int l=1; l<=V; l++) {\r\n                boolean AC = A.contains(l);\r\n                boolean BC = B.contains(l);\r\n                if( AC & BC) {\r\n                    System.out.println(\"NO\");\r\n                    result = false;\r\n                    break;\r\n                }\r\n\r\n\r\n            }\r\n            if(result){\r\n            System.out.println(\"YES\");\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Team1/6-Graph/Baekjoon/T1 대훈/P1707_이분_그래프.java b/Team1/6-Graph/Baekjoon/T1 대훈/P1707_이분_그래프.java
--- a/Team1/6-Graph/Baekjoon/T1 대훈/P1707_이분_그래프.java	
+++ b/Team1/6-Graph/Baekjoon/T1 대훈/P1707_이분_그래프.java	
@@ -15,6 +15,7 @@
 
             List<Integer> A = new ArrayList<>();
             List<Integer> B = new ArrayList<>();
+            //두 개의 리스트 생성
 
             for (int k=0; k<E; k++) {
 
Index: Team1/1-Data Structure/Baekjoon/T1 대훈/P11286_절댓값_힙_구현하기.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Collections;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\npublic class P11286_절댓값_힙_구현하기 {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int N = sc.nextInt();\r\n        PriorityQueue<Integer> Msqueue = new PriorityQueue(Collections.reverseOrder());\r\n        PriorityQueue<Integer> Plqueue = new PriorityQueue();\r\n\r\n        for(int i = 0; i < N; ++i) {\r\n            int n = sc.nextInt();\r\n            if (n > 0) {\r\n                Plqueue.offer(n);\r\n            } else if (n < 0) {\r\n                Msqueue.offer(n);\r\n            } else if (Plqueue.isEmpty() & Msqueue.isEmpty()) {\r\n                System.out.println(\"0\");\r\n            } else if (Plqueue.isEmpty()) {\r\n                System.out.println(Msqueue.poll());\r\n            } else if (Msqueue.isEmpty()) {\r\n                System.out.println(Plqueue.poll());\r\n            } else {\r\n                int Pl = (Integer)Plqueue.peek();\r\n                int Plabs = Math.abs(Pl);\r\n                int Ms = (Integer)Msqueue.peek();\r\n                int Msabs = Math.abs(Ms);\r\n                if (Plabs >= Msabs) {\r\n                    System.out.println(Msqueue.poll());\r\n                } else {\r\n                    System.out.println(Plqueue.poll());\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Team1/1-Data Structure/Baekjoon/T1 대훈/P11286_절댓값_힙_구현하기.java b/Team1/1-Data Structure/Baekjoon/T1 대훈/P11286_절댓값_힙_구현하기.java
--- a/Team1/1-Data Structure/Baekjoon/T1 대훈/P11286_절댓값_힙_구현하기.java	
+++ b/Team1/1-Data Structure/Baekjoon/T1 대훈/P11286_절댓값_힙_구현하기.java	
@@ -5,6 +5,7 @@
     public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
         int N = sc.nextInt();
+        //양수 큐와 음수 큐 생성
         PriorityQueue<Integer> Msqueue = new PriorityQueue(Collections.reverseOrder());
         PriorityQueue<Integer> Plqueue = new PriorityQueue();
 
@@ -16,11 +17,15 @@
                 Msqueue.offer(n);
             } else if (Plqueue.isEmpty() & Msqueue.isEmpty()) {
                 System.out.println("0");
+                //음수 큐와 양수 큐가 모두 비어있으면 0 출력
             } else if (Plqueue.isEmpty()) {
                 System.out.println(Msqueue.poll());
+                //양수 큐가 비어있으면 음수 큐에서 출력
             } else if (Msqueue.isEmpty()) {
                 System.out.println(Plqueue.poll());
+                //음수 큐가 비어있으면 양수 큐에서 출력
             } else {
+                //음수 큐 출력값과 양수 큐 출력값의 절댓값이 서로 같은 경우
                 int Pl = (Integer)Plqueue.peek();
                 int Plabs = Math.abs(Pl);
                 int Ms = (Integer)Msqueue.peek();
